// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: gatesvr.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GateSvr_KickPlayer_FullMethodName     = "/gatesvr.GateSvr/KickPlayer"
	GateSvr_ForwardMessage_FullMethodName = "/gatesvr.GateSvr/ForwardMessage"
	GateSvr_PushToClient_FullMethodName   = "/gatesvr.GateSvr/PushToClient"
)

// GateSvrClient is the client API for GateSvr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GateSvrClient interface {
	// 踢下线
	KickPlayer(ctx context.Context, in *KickPlayerRequest, opts ...grpc.CallOption) (*KickPlayerResponse, error)
	// 消息转发
	ForwardMessage(ctx context.Context, in *ForwardMessageRequest, opts ...grpc.CallOption) (*ForwardMessageResponse, error)
	// 通知客户端
	PushToClient(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushResponse, error)
}

type gateSvrClient struct {
	cc grpc.ClientConnInterface
}

func NewGateSvrClient(cc grpc.ClientConnInterface) GateSvrClient {
	return &gateSvrClient{cc}
}

func (c *gateSvrClient) KickPlayer(ctx context.Context, in *KickPlayerRequest, opts ...grpc.CallOption) (*KickPlayerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KickPlayerResponse)
	err := c.cc.Invoke(ctx, GateSvr_KickPlayer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateSvrClient) ForwardMessage(ctx context.Context, in *ForwardMessageRequest, opts ...grpc.CallOption) (*ForwardMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ForwardMessageResponse)
	err := c.cc.Invoke(ctx, GateSvr_ForwardMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateSvrClient) PushToClient(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PushResponse)
	err := c.cc.Invoke(ctx, GateSvr_PushToClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GateSvrServer is the server API for GateSvr service.
// All implementations must embed UnimplementedGateSvrServer
// for forward compatibility.
type GateSvrServer interface {
	// 踢下线
	KickPlayer(context.Context, *KickPlayerRequest) (*KickPlayerResponse, error)
	// 消息转发
	ForwardMessage(context.Context, *ForwardMessageRequest) (*ForwardMessageResponse, error)
	// 通知客户端
	PushToClient(context.Context, *PushRequest) (*PushResponse, error)
	mustEmbedUnimplementedGateSvrServer()
}

// UnimplementedGateSvrServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGateSvrServer struct{}

func (UnimplementedGateSvrServer) KickPlayer(context.Context, *KickPlayerRequest) (*KickPlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KickPlayer not implemented")
}
func (UnimplementedGateSvrServer) ForwardMessage(context.Context, *ForwardMessageRequest) (*ForwardMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardMessage not implemented")
}
func (UnimplementedGateSvrServer) PushToClient(context.Context, *PushRequest) (*PushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushToClient not implemented")
}
func (UnimplementedGateSvrServer) mustEmbedUnimplementedGateSvrServer() {}
func (UnimplementedGateSvrServer) testEmbeddedByValue()                 {}

// UnsafeGateSvrServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GateSvrServer will
// result in compilation errors.
type UnsafeGateSvrServer interface {
	mustEmbedUnimplementedGateSvrServer()
}

func RegisterGateSvrServer(s grpc.ServiceRegistrar, srv GateSvrServer) {
	// If the following call pancis, it indicates UnimplementedGateSvrServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GateSvr_ServiceDesc, srv)
}

func _GateSvr_KickPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateSvrServer).KickPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GateSvr_KickPlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateSvrServer).KickPlayer(ctx, req.(*KickPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateSvr_ForwardMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForwardMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateSvrServer).ForwardMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GateSvr_ForwardMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateSvrServer).ForwardMessage(ctx, req.(*ForwardMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateSvr_PushToClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateSvrServer).PushToClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GateSvr_PushToClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateSvrServer).PushToClient(ctx, req.(*PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GateSvr_ServiceDesc is the grpc.ServiceDesc for GateSvr service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GateSvr_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gatesvr.GateSvr",
	HandlerType: (*GateSvrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "KickPlayer",
			Handler:    _GateSvr_KickPlayer_Handler,
		},
		{
			MethodName: "ForwardMessage",
			Handler:    _GateSvr_ForwardMessage_Handler,
		},
		{
			MethodName: "PushToClient",
			Handler:    _GateSvr_PushToClient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gatesvr.proto",
}
